{"version":3,"sources":["api.js","components/UploadButton.jsx","hooks/useLocalStorage.js","App.js","reportWebVitals.js","index.js"],"names":["baseURL","window","location","origin","apiClient","a","url","body","method","fetch","res","json","ok","Error","message","Input","styled","display","UploadButton","props","htmlFor","onChange","onFileChange","accept","id","type","IconButton","size","style","justifyContent","minWidth","minHeight","color","backgroundColor","aria-label","component","useLocalStorage","key","initialValue","readValue","item","localStorage","getItem","JSON","parse","error","console","warn","useState","storedValue","setStoredValue","useEffect","handleStorageChange","addEventListener","removeEventListener","value","newValue","Function","setItem","stringify","dispatchEvent","Event","Loading","alignSelf","CircularProgress","ResizedImagesList","resizedImages","ImageList","sx","width","height","cols","rowHeight","map","image","ImageListItem","href","src","App","selectedFile","setSelectedFile","setImage","loading","setLoading","setWidth","setHeight","resizedData","setResizedData","setResizedImages","reader","FileReader","onload","result","readAsDataURL","resize","alert","resizedName","name","downloadUrl","data","alignContent","Stack","direction","textAlign","Box","event","target","files","paddingBottom","spacing","divider","Divider","orientation","flexItem","TextField","variant","label","borderRadius","flex","onLoad","offsetHeight","offsetWidth","alt","maxWidth","maxHeight","Button","onClick","startIcon","link","document","createElement","URL","createObjectURL","Blob","download","click","setTimeout","revokeObjectURL","length","reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.192869a7.chunk.js","sourcesContent":["const baseURL = `${window.location.origin}/api`\nexport const apiClient = async ({ url, body, method = 'GET' }) => {\n  const res = await fetch(`${baseURL}/${url}`, {\n    method,\n    body\n  })\n  const json = await res.json()\n  if (res.ok) {\n    return json\n  } else {\n    throw new Error(json.message)\n  }\n}\n","import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport IconButton from '@mui/material/IconButton';\nimport PhotoCamera from '@mui/icons-material/PhotoCamera';\n\nconst Input = styled('input')({\n    display: 'none',\n});\n\nexport const UploadButton = (props) => {\n    return (\n        <label htmlFor=\"icon-button-file\">\n            <Input onChange={props.onFileChange} accept=\"image/*\" id=\"icon-button-file\" type=\"file\" />\n            <IconButton size='large' style={{ justifyContent: 'center', minWidth: '50px', minHeight: '50px', color: '#fd5750', backgroundColor: 'black'}} aria-label=\"upload picture\" component=\"span\">\n                <PhotoCamera />\n            </IconButton>\n        </label>\n    )\n}\n","import { useEffect, useState } from 'react'\n\nfunction useLocalStorage(key, initialValue) {\n  const readValue = () => {\n    if (typeof window === 'undefined') {\n      return initialValue\n    }\n\n    try {\n      const item = window.localStorage.getItem(key)\n      return item ? JSON.parse(item) : initialValue\n    } catch (error) {\n      console.warn(`Error reading localStorage key \"${key}\":`, error)\n      return initialValue\n    }\n  }\n  const [storedValue, setStoredValue] = useState(readValue)\n\n  const setValue = (value) => {\n    if (typeof window == 'undefined') {\n      console.warn(`Tried setting localStorage key \"${key}\" even though environment is not a client`)\n    }\n\n    try {\n      const newValue = value instanceof Function ? value(storedValue) : value\n\n      window.localStorage.setItem(key, JSON.stringify(newValue))\n\n      setStoredValue(newValue)\n\n      window.dispatchEvent(new Event('local-storage'))\n    } catch (error) {\n      console.warn(`Error setting localStorage key \"${key}\":`, error)\n    }\n  }\n\n  useEffect(() => {\n    setStoredValue(readValue())\n  }, [])\n\n  useEffect(() => {\n    const handleStorageChange = () => {\n      setStoredValue(readValue())\n    }\n\n    window.addEventListener('storage', handleStorageChange)\n\n    window.addEventListener('local-storage', handleStorageChange)\n\n    return () => {\n      window.removeEventListener('storage', handleStorageChange)\n      window.removeEventListener('local-storage', handleStorageChange)\n    }\n  }, [])\n\n  return [storedValue, setValue]\n}\n\nexport default useLocalStorage\n","import * as React from 'react'\nimport { useState, useEffect } from 'react'\nimport { apiClient } from './api'\nimport { UploadButton } from './components/UploadButton'\nimport Box from '@mui/material/Box'\nimport Stack from '@mui/material/Stack'\nimport Divider from '@mui/material/Divider'\nimport TextField from '@mui/material/TextField'\nimport Button from '@mui/material/Button'\nimport AutoAwesomeIcon from '@mui/icons-material/AutoAwesome'\nimport Slider from '@mui/material/Slider'\nimport SaveAltIcon from '@mui/icons-material/SaveAlt'\nimport CircularProgress from '@mui/material/CircularProgress'\nimport ImageList from '@mui/material/ImageList'\nimport ImageListItem from '@mui/material/ImageListItem'\nimport useLocalStorage from './hooks/useLocalStorage'\n\nconst Loading = () => (\n  <div style={{ alignSelf: 'center', justifyContent: 'center' }}>\n    <CircularProgress />\n  </div>\n)\n\nconst ResizedImagesList = (props) => {\n  const { resizedImages } = props\n  return (\n    <ImageList\n      sx={{ width: '70vw', height: 600 }}\n      style={{ alignSelf: 'center', justifyContent: 'center' }}\n      width=\"100%\"\n      height={'100vh'}\n      cols={5}\n      rowHeight={200}\n    >\n      {resizedImages.map((image) => {\n        return (\n          <ImageListItem key={image}>\n            <a href={image}>\n              <img src={image} />\n            </a>\n          </ImageListItem>\n        )\n      })}\n    </ImageList>\n  )\n}\n\nfunction App() {\n  const [selectedFile, setSelectedFile] = useState(null)\n  const [image, setImage] = useState(null)\n  const [loading, setLoading] = useState(false)\n  const [width, setWidth] = useState(0)\n  const [height, setHeight] = useState(0)\n  const [resizedData, setResizedData] = useState({})\n  const [resizedImages, setResizedImages] = useLocalStorage('resizedImages', [])\n\n  const onFileChange = (event) => {\n    setResizedData({})\n    setSelectedFile(event.target.files[0])\n  }\n\n  const onImgLoad = ({ target }) => {\n    setHeight(target.offsetHeight)\n    setWidth(target.offsetWidth)\n  }\n\n  useEffect(() => {\n    if (selectedFile) {\n      const reader = new FileReader()\n\n      reader.onload = () => {\n        setImage(reader.result)\n      }\n\n      reader.readAsDataURL(selectedFile)\n    }\n  }, [selectedFile])\n\n  const resize = async () => {\n    if (height <= 0 || width <= 0) {\n      alert('Values need to be greater than 0')\n      return\n    }\n    setLoading(true)\n    const resizedName = `${width}w-${height}h-${selectedFile.name}`\n    try {\n      const res = await apiClient({\n        url: `resize?filename=${resizedName}&width=${width}&height=${height}`,\n        body: selectedFile,\n        method: 'PUT'\n      })\n      setResizedData({\n        url: res.downloadUrl,\n        name: res.name,\n        data: res.data\n      })\n      setResizedImages([...resizedImages, res.downloadUrl])\n      setLoading(false)\n    } catch (e) {\n      setLoading(false)\n      alert(e.message)\n    }\n  }\n\n  const save = () => {\n    const link = document.createElement('a')\n    link.href = window.URL.createObjectURL(new Blob([resizedData.data], { type: 'application/octet-stream' }))\n    link.download = resizedData.name\n    link.click()\n    setTimeout(function () {\n      window.URL.revokeObjectURL(link)\n    }, 200)\n  }\n\n  return (\n    <div\n      style={{\n        backgroundColor: 'black',\n        display: 'flex',\n        alignContent: 'center',\n        justifyContent: 'center',\n        minHeight: '100vh'\n      }}\n    >\n      <Stack direction=\"column\">\n        <div\n          style={{\n            alignContent: 'center',\n            alignSelf: 'center',\n            justifyContent: 'center'\n          }}\n        >\n          <h2\n            style={{\n              color: 'white',\n              textAlign: 'center',\n              alignSelf: 'center',\n              justifyContent: 'center'\n            }}\n          >\n            Image Resizer\n          </h2>\n          <Stack direction=\"row\">\n            <p style={{ color: selectedFile && selectedFile.name ? '#fd5750' : 'white', textAlign: 'center' }}>\n              {' '}\n              {selectedFile ? selectedFile.name : 'Select a file'}{' '}\n            </p>\n            <Box width={20} />\n            <UploadButton onFileChange={onFileChange} />\n          </Stack>\n          <Box height={40} />\n        </div>\n        {image && (\n          <Stack\n            style={{ paddingBottom: 100, alignSelf: 'center' }}\n            direction=\"column\"\n            spacing={2}\n            divider={<Divider orientation=\"horizontal\" flexItem />}\n          >\n            <Stack direction=\"row\">\n              <TextField\n                value={width}\n                onChange={(event) => setWidth(event.target.value)}\n                variant=\"filled\"\n                label=\"width\"\n                style={{ backgroundColor: 'white' }}\n                type={'number'}\n              />\n              <Box width={'50%'} />\n              <TextField\n                value={height}\n                onChange={(event) => setHeight(event.target.value)}\n                variant=\"filled\"\n                label=\"height\"\n                style={{ backgroundColor: 'white' }}\n                type={'number'}\n              />\n            </Stack>\n            <div\n              style={{\n                borderRadius: 0,\n                alignContent: 'center',\n                justifyContent: 'center',\n                alignSelf: 'center',\n                flex: 1\n              }}\n            >\n              {loading ? (\n                <Loading />\n              ) : (\n                <img\n                  onLoad={onImgLoad}\n                  src={resizedData.url || image}\n                  alt=\"Image\"\n                  style={{\n                    borderRadius: 5,\n                    width: '100%',\n                    height: '100%',\n                    maxWidth: '70vw',\n                    maxHeight: '70vh',\n                    alignSelf: 'center',\n                    justifyContent: 'center'\n                  }}\n                />\n              )}\n            </div>\n            <Button onClick={resize} variant=\"outlined\" startIcon={<AutoAwesomeIcon />}>\n              {' '}\n              Resize{' '}\n            </Button>\n            {resizedData.url && (\n              <Button onClick={save} variant=\"outlined\" startIcon={<SaveAltIcon />}>\n                {' '}\n                Save{' '}\n              </Button>\n            )}\n          </Stack>\n        )}\n        <div style={{ alignSelf: 'center', justifyContent: 'center' }}>\n          <h2 style={{ textAlign: 'center', color: 'white' }}> History </h2>\n          {resizedImages.length > 0 && <ResizedImagesList resizedImages={resizedImages} />}\n        </div>\n      </Stack>\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}